# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

# on: [push]

# on:
#   push:
#     branches: [$default-branch]
#   pull_request:
#     branches: [$default-branch]

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  # Job: Lint #####################################################################################
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Cache node dependencies
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

  # Job: Build ####################################################################################
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Cache node dependencies
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Setup Angular environment
        run: |
          sed -i 's/#TOKEN/'"${{ secrets.MAPBOX_TOKEN }}"'/g' src/environments/environment.prod.ts
          cp src/environments/environment.sample.ts src/environments/environment.ts

      - name: Build
        run: npm run build:prod

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: www
          path: www

  # Job: Deploy WebApp ##############################################################################
  deploy-webapp:
    name: Deploy WebApp
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: www
          path: www

      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # Job: Package Linux ############################################################################
  package-linux:
    name: Package Linux
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: www
          path: www

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Capacitor sync
        run: npx cap sync

      - name: Install dependencies
        run: npm ci
        working-directory: electron

      - name: Package
        run: npm run electron:build-linux
        working-directory: electron

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-linux
          path: electron/dist/*.deb

  # Job: Package Windows ############################################################################
  package-windows:
    name: Package Windows
    needs: build
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: www
          path: www

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Capacitor sync
        run: npx cap sync

      - name: Install dependencies
        run: npm ci
        working-directory: electron

      - name: Package
        run: npm run electron:build-windows
        working-directory: electron

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-windows
          path: electron/dist/*.exe

  # Job: Package Mac ############################################################################
  package-macos:
    name: Package MacOS
    needs: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: www
          path: www

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Capacitor sync
        run: npx cap sync

      - name: Install dependencies
        run: npm ci
        working-directory: electron

      - name: Package
        run: npm run electron:build-mac
        working-directory: electron

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-mac
          path: electron/dist/*.dmg

  # Create Release ################################################################################
  create-release:
    name: Create Release
    needs: [package-linux, package-windows, package-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download packaged artifacts
        uses: actions/download-artifact@v2 # Download all artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Assets
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: electron/dist/**/*.{deb,exe,dmg}
      - name: Upload Release Assets (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dist-linux/mymapp.deb
          asset_name: mymapp.deb
          asset_content_type: application/x-debian-package
      - name: Upload Release Assets (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dist-windows/mymapp.exe
          asset_name: mymapp.exe
          asset_content_type: application/x-msdos-program
      - name: Upload Release Assets (MacOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dist-mac/mymapp.dmg
          asset_name: mymapp.dmg
          asset_content_type: application/x-apple-diskimage

  # Create Release ################################################################################
  remove-old-artifacts:
    name: Remove old artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Remove old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: "3 days"
